from AbishnoiRobot.modules.sql_extended.night_mode_sql import (
    add_nightmode,
    rmnightmode,
    get_all_chat_id,
    is_nightmode_indb,
)
from telethon.tl.types import ChatBannedRights
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telethon import functions
from telethon import types
from AbishnoiRobot.events import register
from AbishnoiRobot import telethn as tbot
import os


async def is_register_admin(chat, user):
    if isinstance(chat, (types.InputPeerChannel, types.InputChannel)):

        return isinstance(
            (
                await tbot(functions.channels.GetParticipantRequest(chat, user))
            ).participant,
            (types.ChannelParticipantAdmin, types.ChannelParticipantCreator),
        )
    elif isinstance(chat, types.InputPeerChat):

        ui = await tbot.get_peer_id(user)
        ps = (
            await tbot(functions.messages.GetFullChatRequest(chat.chat_id))
        ).full_chat.participants.participants
        return isinstance(
            next((p for p in ps if p.user_id == ui), None),
            (types.ChatParticipantAdmin, types.ChatParticipantCreator),
        )
    else:
        return None


hehes = ChatBannedRights(
    until_date=None,
    send_messages=True,
    send_media=True,
    send_stickers=True,
    send_gifs=True,
    send_games=True,
    send_inline=True,
    send_polls=True,
    invite_users=True,
    pin_messages=True,
    change_info=True,
)
openhehe = ChatBannedRights(
    until_date=None,
    send_messages=False,
    send_media=False,
    send_stickers=False,
    send_gifs=False,
    send_games=False,
    send_inline=False,
    send_polls=False,
    invite_users=True,
    pin_messages=True,
    change_info=True,
)


@register(pattern="^/night")
async def close_ws(event):
    if event.is_group:
        if not (await is_register_admin(event.input_chat, event.message.sender_id)):
            await event.reply(
                "ü§¶üèª‚Äç‚ôÇÔ∏èY·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ s·¥è  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ü§¶.."
            )
            return

    if not event.is_group:
        await event.reply("Y·¥è·¥ú C·¥Ä…¥ O…¥ ü è E…¥·¥Ä ô ü·¥á N…™…¢ ú·¥õ M·¥è·¥Ö·¥á …™…¥ G Ä·¥è·¥ú·¥òs.")
        return
    if is_nightmode_indb(str(event.chat_id)):
        await event.reply("T ú…™s C ú·¥Ä·¥õ …™s H·¥Äs A ü Ä·¥á·¥Ä·¥Ö è E…¥·¥Ä ô ü·¥á·¥Ö N…™…¢ ú·¥õ M·¥è·¥Ö·¥á.")
        return
    add_nightmode(str(event.chat_id))
    await event.reply(
        f"A·¥Ö·¥Ö·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ {event.chat.title} ·¥°…™·¥õ ú …™·¥Ö  {event.chat_id} ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs . **T ú…™s G Ä·¥è·¥ú·¥ò W…™ ü ü B·¥á C ü·¥ès·¥á·¥Ö O…¥ 12A·¥ç(IST) A…¥·¥Ö W…™ ü ü O·¥ò·¥á…¥·¥á·¥Ö O…¥ 06A·¥ç(IST)**"
    )


@register(pattern="^/rmnight")
async def disable_ws(event):
    if event.is_group:
        if not (await is_register_admin(event.input_chat, event.message.sender_id)):
            await event.reply(
                "ü§¶üèª‚Äç‚ôÇÔ∏èY·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ s·¥è  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...ü§¶ "
            )
            return

    if not event.is_group:
        await event.reply("Y·¥è·¥ú C·¥Ä…¥ O…¥ ü è D…™s·¥Ä ô ü·¥á N…™…¢ ú·¥õ M·¥è·¥Ö·¥á …™…¥ G Ä·¥è·¥ú·¥òs.")
        return
    if not is_nightmode_indb(str(event.chat_id)):
        await event.reply("This Chat is Has Not Enabled Night Mode.")
        return
    rmnightmode(str(event.chat_id))
    await event.reply(
        f"R·¥á·¥ç·¥è·¥†·¥á·¥Ö Chat {event.chat.title} W…™·¥õ ú …™·¥Ö  {event.chat_id} “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á ."
    )


async def job_close():
    ws_chats = get_all_chat_id()
    if len(ws_chats) == 0:
        return
    for warner in ws_chats:
        try:
            await tbot.send_message(
                int(warner.chat_id),
                "12:00 A·¥ç, G Ä·¥è·¥ú·¥ò Is C ü·¥ès…™…¥…¢ T…™ ü ü 6 A·¥ç. N…™…¢ ú·¥õ M·¥è·¥Ö·¥á S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ! \n**·¥ò·¥è·¥†·¥á Ä·¥Ö  ô è ‚û™ HOMIES **",
            )
            await tbot(
                functions.messages.EditChatDefaultBannedRightsRequest(
                    peer=int(warner.chat_id), banned_rights=hehes
                )
            )
        except Exception as e:
            logger.info(f"U…¥·¥Ä ô ü·¥á T·¥è C ü·¥ès·¥á G Ä·¥è·¥ú·¥ò {warner} - {e}")


# Run everyday at 12am
scheduler = AsyncIOScheduler(timezone="Asia/Kolkata")
scheduler.add_job(job_close, trigger="cron", hour=23, minute=59)
scheduler.start()


async def job_open():
    ws_chats = get_all_chat_id()
    if len(ws_chats) == 0:
        return
    for warner in ws_chats:
        try:
            await tbot.send_message(
                int(warner.chat_id),
                "…¥·¥è·¥° ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ\n** P·¥è·¥°·¥á Ä·¥á·¥Ö B è„Äå HOMIES BOT **",
            )
            await tbot(
                functions.messages.EditChatDefaultBannedRightsRequest(
                    peer=int(warner.chat_id), banned_rights=openhehe
                )
            )
        except Exception as e:
            logger.info(f"U…¥·¥Ä ô ü·¥á T·¥è O·¥ò·¥á…¥ G Ä·¥è·¥ú·¥ò {warner.chat_id} - {e}")


# Run everyday at 06
scheduler = AsyncIOScheduler(timezone="Asia/Kolkata")
scheduler.add_job(job_open, trigger="cron", hour=5, minute=59)
scheduler.start()


__mod_name__ = "N…™…¢ ú·¥õ‚Äã"
